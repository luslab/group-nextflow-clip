# iCLIP mapping pipeline for Flora
# A. M. Chakrabarti
# Last updated: 27th January 2020

# sbatch -N 1 -J mouse -o mouse_%A.out --wrap="time snakemake -k --cluster 'sbatch {params.cluster}' --jobs 200 --latency-wait 60"

from os.path import join

# Import config file & parameters

configfile: 'config.yaml'

rule all:
    input:
        expand("results/pre_fastqc/{sample}_fastqc.html", sample=config["samples"]),
        expand("results/post_fastqc/{sample}_fastqc.html", sample=config["samples"]),
        expand("results/mapped/{sample}.Aligned.sortedByCoord.out.bam", sample=config["samples"]),
        expand("results/xlinks/{sample}.xl.bed.gz", sample=config["samples"]),
        expand("results/xlinks/{sample}.xl.annotated.bed.gz", sample=config["samples"]),
        expand("results/coverage/{sample}.unique_plus.bigwig", sample=config["samples"]),
        expand("results/norm_coverage/{sample}.unique_plus.bigwig", sample=config["samples"]),
        expand("results/xlinks/bigwig/{sample}.normalised.pos.bigwig", sample=config["samples"]),
        # expand("results/peaks/{sample}.xl.3nt_peaks.bed.gz", sample=config["samples"]),
        # expand("results/clusters/{sample}.xl.3nt_peaks.3nt_clusters.bed.gz", sample=config["samples"])

# =============================================================================
# FastQC
# =============================================================================

rule pre_fastqc:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        html="results/pre_fastqc/{sample}_fastqc.html",
    params:
        fc="--outdir results/pre_fastqc",
        cluster="-J pre_fastqc -N 1 --mem=16G -t 12:00:00 -o logs/pre_fastqc.{sample}.%A.log"
    run:
        shell("fastqc {input} {params.fc}")
        fastqc_out = "/".join(("results/pre_fastqc", os.path.basename(input[0])))
        fastqc_out = "_".join((fastqc_out, "fastqc.html"))
        fastqc_out = fastqc_out.replace(".fastq.gz","")
        shell("echo {fastqc_out}")
        shell("mv {fastqc_out} {output.html}")

# =============================================================================
# Pre-processing
# =============================================================================

rule removeAdapters:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        fastq="results/trimmed/{sample}.fastq.gz"
    params:
        cluster="-N 1 -c 8 --mem=16G -t 12:00:00 -J removeAdapters -o logs/removeAdapters.{sample}.%A.log"
    shell:
        """
        cutadapt -j 8 --minimum-length 16 -q 10 -a AGATCGGAAGAGC -o {output.fastq} {input}
        """

rule post_fastqc:
    input:
        fastq="results/trimmed/{sample}.fastq.gz"
    output:
        html="results/post_fastqc/{sample}_fastqc.html",
        zipped=temp("results/post_fastqc/{sample}_fastqc.zip")
    params:
        fc="--outdir results/post_fastqc",
        cluster="-J post_fastqc -N 1 --mem=16G -t 12:00:00 -o logs/post_fastqc.{sample}.%A.log"
    shell:
        """
        fastqc {params.fc} {input.fastq} 
        """

# =============================================================================
# Pre-mapping
# =============================================================================

rule mapBowtie:
    input:
        fastq="results/trimmed/{sample}.fastq.gz"
    output:
        rRNA_sam=temp("results/premapping/{sample}.rRNA.sam"),
        rRNA_unmapped=temp("results/premapping/{sample}.rRNA_unmapped.fq"),
        rRNA_bam="results/premapping/{sample}.rRNA.bam",
        rRNA_log="results/logs/{sample}.rRNA.log",
        snRNA_sam=temp("results/premapping/{sample}.snRNA.sam"),
        snRNA_unmapped=temp("results/premapping/{sample}.snRNA_unmapped.fq"),
        snRNA_bam="results/premapping/{sample}.snRNA.bam",
        snRNA_log="results/logs/{sample}.snRNA.log",
        tRNA_sam=temp("results/premapping/{sample}.tRNA.sam"),
        tRNA_unmapped="results/premapping/{sample}.tRNA_unmapped.fq.gz",
        tRNA_bam="results/premapping/{sample}.tRNA.bam",
        tRNA_log="results/logs/{sample}.tRNA.log",
    params:
        bt_rRNA=config['bt_rRNA'],
        bt_tRNA=config['bt_tRNA'],
        bt_snRNA=config['bt_snRNA'],
        tRNA_unmapped="results/premapping/{sample}.tRNA_unmapped.fq",
        cluster="-N 1 -c 8 -J mapBowtie --mem=32G -o logs/mapBowtie.{sample}.%A.log -t 6:00:00"
    threads:
        8
    shell:
        """
        ml Bowtie

        # 1. Map to rRNA
        zcat {input.fastq} | \
        bowtie -a -v 2 -m 50 --best --strata --threads {threads} -q --sam --norc --un {output.rRNA_unmapped} {params.bt_rRNA} - {output.rRNA_sam} 2> {output.rRNA_log}
        samtools view -hu {output.rRNA_sam} | sambamba sort -t {threads} -o {output.rRNA_bam} /dev/stdin

        # 2. Map to snRNA
        bowtie -a -v 2 -m 50 --best --strata --threads {threads} -q --sam --norc --un {output.snRNA_unmapped} {params.bt_snRNA} {output.rRNA_unmapped} {output.snRNA_sam} 2> {output.snRNA_log}
        samtools view -hu {output.snRNA_sam} | sambamba sort -t {threads} -o {output.snRNA_bam} /dev/stdin

        # 3. Map to tRNA
        bowtie -a -v 2 -m 50 --best --strata --threads {threads} -q --sam --norc --un {params.tRNA_unmapped} {params.bt_tRNA} {output.snRNA_unmapped} {output.tRNA_sam} 2> {output.tRNA_log}
        samtools view -hu {output.tRNA_sam} | sambamba sort -t {threads} -o {output.tRNA_bam} /dev/stdin

        pigz {params.tRNA_unmapped}
        """

# =============================================================================
# Genome mapping
# =============================================================================

rule mapStarLenient5p:
    input:
        fastq="results/premapping/{sample}.tRNA_unmapped.fq.gz",
    output:
        bam="results/mapped/{sample}.Aligned.sortedByCoord.out.bam",
        bai="results/mapped/{sample}.Aligned.sortedByCoord.out.bam.bai",
        log="results/logs/{sample}.genome.log",
    params:
        STAR_GRCm38_GencodeM24=config['STAR_GRCm38_GencodeM24'],
        outprefix="results/mapped/{sample}.",
        log="results/mapped/{sample}.Log.final.out",
        cluster="-J mapStar -N 1 -c 8 --mem-per-cpu=4GB -t 6:00:00 -o logs/mapStar.{sample}.%A.log"
    threads:
        8
    shell:
        """
        STAR --runThreadN {threads} \
        --genomeDir {params.STAR_GRCm38_GencodeM24} --genomeLoad NoSharedMemory \
        --readFilesIn {input.fastq} --readFilesCommand zcat \
        --outFileNamePrefix {params.outprefix} \
        --outFilterMultimapNmax 1 --outFilterMultimapScoreRange 1 \
        --outSAMattributes All --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --outFilterType BySJout \
        --alignIntronMin 20 --alignIntronMax 1000000 --outFilterScoreMin 10 --alignEndsType Extend5pOfRead1 \
        --twopassMode Basic \
        --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 60000000000

        sambamba index -t {threads} {output.bam}
        mv {params.log} {output.log}
        """

# =============================================================================
# Collapse PCR duplicates
# =============================================================================

rule UMItools:
    input:
        bam="results/mapped/{sample}.Aligned.sortedByCoord.out.bam",
    output:
        bam="results/dedup/{sample}.dedup.bam",
        stats="results/dedup/stats/{sample}_edit_distance.tsv"
    params:
        stats="results/dedup/stats/{sample}",
        cluster="-N 1 -c 1 --mem-per-cpu=32GB -J UMItools -t 6:00:00 -o logs/UMItools.{sample}.%A.log"
    shell:
        """
        # umi_tools dedup -I {input.bam} -S {output.bam} --output-stats={params.stats}
        umi_tools dedup --umi-separator=":" -I {input.bam} -S {output.bam} --output-stats={params.stats}
        """


# =============================================================================
# Coverage tracks
# =============================================================================

rule createUniqueBigwig:
    input:
        "results/dedup/{sample}.dedup.bam",
    output:
        bigwig_pos="results/coverage/{sample}.unique_plus.bigwig",
        bigwig_neg="results/coverage/{sample}.unique_minus.bigwig",
        bg_pos=temp("results/coverage/{sample}.Signal.Unique.str1.out.bg"),
        bg_neg=temp("results/coverage/{sample}.Signal.Unique.str2.out.bg"),
        bg_multi_pos=temp("results/coverage/{sample}.Signal.UniqueMultiple.str1.out.bg"),
        bg_multi_neg=temp("results/coverage/{sample}.Signal.UniqueMultiple.str2.out.bg"),
        log=temp("results/coverage/{sample}.Log.out")
    params:
        outprefix="results/coverage/{sample}.",
        fai=config['fai'],
        cluster="-J create_bigwig -N 1 -c 1 --mem=16G -t 12:00:00 -o logs/create_bigwig.{sample}.%A.log"
    shell:
        """
        STAR --runMode inputAlignmentsFromBAM --inputBAMfile {input} --outWigType bedGraph --outWigStrand Stranded --outWigNorm None --outFileNamePrefix {params.outprefix}

        # Unique
        bedSort {output.bg_pos} {output.bg_pos}
        bedSort {output.bg_neg} {output.bg_neg}
        bedGraphToBigWig {output.bg_pos} {params.fai} {output.bigwig_pos}
        bedGraphToBigWig {output.bg_neg} {params.fai} {output.bigwig_neg}
        """

rule createNormUniqueBigwig:
    input:
        "results/dedup/{sample}.dedup.bam",
    output:
        bigwig_pos="results/norm_coverage/{sample}.unique_plus.bigwig",
        bigwig_neg="results/norm_coverage/{sample}.unique_minus.bigwig",
        bg_pos=temp("results/norm_coverage/{sample}.Signal.Unique.str1.out.bg"),
        bg_neg=temp("results/norm_coverage/{sample}.Signal.Unique.str2.out.bg"),
        bg_multi_pos=temp("results/norm_coverage/{sample}.Signal.UniqueMultiple.str1.out.bg"),
        bg_multi_neg=temp("results/norm_coverage/{sample}.Signal.UniqueMultiple.str2.out.bg"),
        log=temp("results/norm_coverage/{sample}.Log.out")
    params:
        outprefix="results/norm_coverage/{sample}.",
        fai=config['fai'],
        cluster="-J create_bigwig -N 1 -c 1 --mem=16G -t 12:00:00 -o logs/create_bigwig.{sample}.%A.log"
    shell:
        """
        STAR --runMode inputAlignmentsFromBAM --inputBAMfile {input} --outWigType bedGraph --outWigStrand Stranded --outWigNorm RPM --outFileNamePrefix {params.outprefix}

        # Unique
        bedSort {output.bg_pos} {output.bg_pos}
        bedSort {output.bg_neg} {output.bg_neg}
        bedGraphToBigWig {output.bg_pos} {params.fai} {output.bigwig_pos}
        bedGraphToBigWig {output.bg_neg} {params.fai} {output.bigwig_neg}
        """

# =============================================================================
# Peak calling
# =============================================================================

rule bamtoxlink:
    input:
        "results/dedup/{sample}.dedup.bam",
    output:
        bed="results/xlinks/{sample}.xl.bed.gz",
        bedgraph="results/xlinks/{sample}.xl.bedgraph.gz",
        normbedgraph="results/xlinks/{sample}.xl.normalised.bedgraph.gz",
    log:
        rlog="results/logs/{sample}.xl.log",
    params:
        bed="results/xlinks/{sample}.xl.bed",
        bedgraph="results/xlinks/{sample}.xl.bedgraph",
        normbedgraph="results/xlinks/{sample}.xl.normalised.bedgraph",
        bamtoxlink=config['bamtoxlink'],
        cluster="-N 1 -c 1 --mem-per-cpu=32GB -J bamtoxlink -t 12:00:00 -o logs/bamtoxlink.{sample}.%A.log"
    shell:
        """
        ml SAMtools
        Rscript --vanilla {params.bamtoxlink} -i {input} -o {params.bed} -x > {log.rlog} 2>&1
        pigz {params.bed} {params.bedgraph} {params.normbedgraph}
        """

rule annotatexlinks:
    input:
        bed="results/xlinks/{sample}.xl.bed.gz",
    output:
        bed="results/xlinks/{sample}.xl.annotated.bed.gz",
    params:
        regions=config['regions'],
        annotateclip=config['annotateclip'],
        cluster="-N 1 -c 1 --mem-per-cpu=16GB -J annotatexlinks -t 12:00:00 -o logs/annotatexlinks.{sample}.%A.log"
    shell:
        """
        Rscript --vanilla {params.annotateclip} -i {input.bed} -a {params.regions} -o {output.bed}
        """

rule iCountPeaks:
    input:
        bed="results/xlinks/{sample}.xl.bed.gz",
    output:
        peaks="results/peaks/{sample}.xl.3nt_peaks.bed.gz",
        regionpeaks="results/peaks/regions/{sample}.xl.3nt_regionpeaks.bed.gz",
        scores="results/peaks/scores/{sample}.xl.3nt.tsv.gz",
        regionscores="results/peaks/regions/scores/{sample}.xl.3nt.tsv.gz"    
    params:
        segment=config['segment'],
        cluster="-N 1 -c 1 --mem-per-cpu=32GB -J iCountPeaks -t 12:00:00 -o logs/iCountPeaks.{sample}.%A.log"
    shell:
        """
        iCount peaks {params.segment} {input.bed} {output.peaks} --scores {output.scores} --half_window 3 --fdr 0.05
        iCount peaks {params.segment} {input.bed} {output.regionpeaks} --scores {output.regionscores} --features CDS intron UTR3 UTR5 ncRNA intergenic --group_by transcript_id --half_window 3 --fdr 0.05
        """

rule clusterPeaks:
    input:
        peaks="results/peaks/{sample}.xl.3nt_peaks.bed.gz",
        regionpeaks="results/peaks/regions/{sample}.xl.3nt_regionpeaks.bed.gz",
    output:
        clusters="results/clusters/{sample}.xl.3nt_peaks.3nt_clusters.bed.gz",
        regionclusters="results/clusters/regions/{sample}.xl.3nt_regionpeaks.3nt_clusters.bed.gz",
    params:
        clusterdist="3",
        cluster="-N 1 -c 1 --mem-per-cpu=32GB -J clusterPeaks -t 12:00:00 -o logs/clusterPeaks.{sample}.%A.log"
    shell:
        """
        zcat {input.peaks} | bedtools merge -s -d {params.clusterdist} -c 4,5,6 -o distinct,sum,distinct | pigz > {output.clusters}
        zcat {input.regionpeaks} | bedtools merge -s -d {params.clusterdist} -c 4,5,6 -o distinct,sum,distinct | pigz > {output.regionclusters}
        """


# =============================================================================
# Generate coverage tracks
# =============================================================================

rule coverageXlinks:
    input:
        "results/xlinks/{sample}.xl.bed.gz"
    output:
        raw="results/xlinks/bedgraph/{sample}.bedgraph.gz",
        xpmbg="results/xlinks/bedgraph/{sample}.normalised.bedgraph.gz",
        xpmbgpos=temp("results/xlinks/bigwig/{sample}.normalised.pos.bedgraph"),
        xpmbgneg=temp("results/xlinks/bigwig/{sample}.normalised.neg.bedgraph"),
        xpmbwpos="results/xlinks/bigwig/{sample}.normalised.pos.bigwig",
        xpmbwneg="results/xlinks/bigwig/{sample}.normalised.neg.bigwig",
    params:
        normaliseclip=config['normaliseclip'],
        fai=config['fai'],
        cluster="-N 1 -c 1 --mem-per-cpu=16GB -J coverageXlinks -t 12:00:00 -o logs/coverageXlinks.{sample}.%A.log"
    shell:
        """
        # Raw
        zcat {input} | awk '{{OFS = "\t"}}{{if ($6 == "+") {{print $1, $2, $3, $5}} else {{print $1, $2, $3, -$5}}}}' | pigz > {output.raw}

        # Normalised to xlinks per million
        {params.normaliseclip} {input} {output.xpmbg}

        # Convert to bigwigs
        zcat {output.xpmbg} | awk '{{OFS="\t"}}{{if($4>0.0) {{print}}}}' > {output.xpmbgpos}
        zcat {output.xpmbg} | awk '{{OFS="\t"}}{{if($4<0.0) {{print}}}}' > {output.xpmbgneg}

        bedSort {output.xpmbgpos} {output.xpmbgpos}
        bedSort {output.xpmbgneg} {output.xpmbgneg}

        bedGraphToBigWig {output.xpmbgpos} {params.fai} {output.xpmbwpos}
        bedGraphToBigWig {output.xpmbgneg} {params.fai} {output.xpmbwneg}
        """