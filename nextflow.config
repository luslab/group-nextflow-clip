/*
 * -------------------------------------------------
 *  luslab/group-nextflow-clip Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Main parameters
params {
  // General
  classpath = "$baseDir/groovy/NfUtils.groovy" // Class path for groovy modules
  outdir = './results' // Results output directory location
  tracedir = "${params.outdir}/pipeline_info" // Trace directy default location

  // Logging options
  monochrome_logs = false

  // Computing options - defaults only
  max_memory = 8.GB
  max_cpus = 4
  max_time = 240.h
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'luslab/nextflow-clip:dev'

// Static details about the pipeline
manifest {
  name = 'luslab/group-nextflow-clip'
  author = 'Luscombe Lab'
  homePage = 'https://github.com/luslab/group-nextflow-clip'
  description = 'Nextflow CLIP analysis pipeline.'
  nextflowVersion = '>=19.10.0'
  version = '0.1'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. 
// Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, 
//once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'

// Enable by default nextflow tracing and place in trace dir location
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

// Create process scaling defaults for running on a cluster
process {

  // Memory and time increases with the number of retrys
  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel: low_memory {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withLabel: mid_memory {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 28.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel: high_memory {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 70.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  // Place process specific resource strategies here
  withName: star {
    //time = { check_max( 24.h * task.attempt, 'time' ) }
    //cache = false
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 8 , 'cpus' ) }
    maxRetries = 2
  }

  withName: bowtie_rrna {
    cpus = { check_max( 16 , 'cpus' ) }
    maxRetries = 2
  }

  withName: getcrosslinkcoverage {
    cpus = { check_max( 4 , 'cpus' ) }
  }

  withName: cutadapt {
    cpus = { check_max( 4 , 'cpus' ) }
  }

  withName: cutadapt {
    cpus = { check_max( 4 , 'cpus' ) }
  }

  withName: multiqc {
    cache = false
  }
}

// Create run profiles
profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true
                singularity.autoMounts = true
                docker.enabled = false }
  test { includeConfig 'conf/test.config' }
  crick { includeConfig 'conf/crick.config' }
  github { includeConfig 'conf/github.config'}
  moduletest { includeConfig 'conf/module-test.config'}
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}